{"version":3,"sources":["App.tsx","components/bar-chart.tsx","components/scatter-chart.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","calAvg","data","sums","counts","i","length","BarChart","options","xAxis","type","name","yAxis","dataset","source","Wine","title","left","text","series","tooltip","trigger","axisPointer","media","option","toolbox","right","feature","saveAsImage","grid","width","top","bottom","visualMap","query","maxWidth","maxHeight","ScatterChart","symbolSize","dataZoom","show","height","xAxisIndex","start","end","filterMode","encode","x","y","restore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.498b1ce4.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\n//functional component for heading  we can add other thing with it\nfunction App(){\n    const heading = <div className='heading'>\n      <h1>Charts</h1>\n    </div>;\n    return heading;\n}\n\n    \nexport default App;\n","import React from 'react';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport Wine from '../wine.json';\r\n\r\n//interface for our average function \r\ninterface Avg{\r\n  (data:number[][]):number[];\r\n  }\r\n\r\n// calAvg : calculate the average of malic acid for each of the three classes of alcohol\r\nvar calAvg:Avg = function(data:number[][]):number[]{ \r\n  let sums = [0,0,0]; //store sum of malic acid value of each class of alcohol\r\n  let avgs = [0,0,0]; // store average of malic aciid of each class of alcohol\r\n  let counts = [0,0,0]; // counts the number of rows for each class of alcohol\r\n  for(let i=0;i<data.length;i++){\r\n    //data[i][0] : class of alcohol\r\n    switch(data[i][0]){\r\n        case 1:\r\n          sums[0] += data[i][2]; // malic acid value\r\n          counts[0]++;\r\n          break;\r\n        case 2:\r\n          sums[1] += data[i][2]; // malic acid value\r\n          counts[1]++;\r\n          break;\r\n        case 3:\r\n          sums[2] += data[i][2]; // malic acid value\r\n          counts[2]++;\r\n          break;\r\n    }\r\n  }\r\n\r\n  \r\n  avgs = [sums[0]/counts[0],sums[1]/counts[1],sums[2]/counts[2]]; // array for storing average of malic acid for each class\r\n  return avgs;\r\n}\r\n\r\n\r\n\r\n// Functional Componenet for returning the Bar chart \r\n\r\nconst BarChart: React.FC = () => {\r\n  // options value\r\n    const options = {\r\n     xAxis: {\r\n       type: 'category',\r\n       name:'Types of Alcohol',\r\n       data:['alcohol1','alcohol2','alcohol3'],\r\n       \r\n     },\r\n     yAxis: {\r\n       type: 'value',\r\n       name:'Average Malic Acid', \r\n     },\r\n     dataset:{\r\n       source:Wine.data, // data source : wine data \r\n     },\r\n     title: {\r\n       left: 'center',\r\n       text: 'Bar Chart'\r\n     },\r\n     series: \r\n       {\r\n         type: 'bar',\r\n         data:calAvg(Wine.data),\r\n         \r\n       },\r\n     tooltip: {\r\n       trigger: 'axis', // pointer to e triggred by axis \r\n       axisPointer: {\r\n         type: 'shadow'\r\n         }\r\n      },\r\n      // media query for different sizes of screen\r\n     media:[\r\n      {\r\n        option:{\r\n          // toolbox for image saving feature\r\n           toolbox: {\r\n             right: 10,\r\n           feature: {\r\n                 saveAsImage: {}\r\n             }\r\n         },\r\n          grid:{\r\n          width:'80%',\r\n          right:90,\r\n          top:50,\r\n          bottom:20\r\n          },\r\n          visualMap:{\r\n           top:50\r\n         }\r\n       }\r\n     },\r\n       {\r\n        query:{\r\n         maxWidth:328,\r\n         maxHeight:560,\r\n       },\r\n        option:{\r\n          toolbox:{\r\n            top:20,\r\n          },\r\n          grid:{\r\n             width:'55%',\r\n             left:'20%',\r\n             top:60,\r\n             right:0\r\n          },\r\n          visualMap:{\r\n            top:60\r\n          }\r\n        }\r\n     },\r\n     {\r\n       query:{\r\n        maxWidth:375,\r\n        maxHeight:812,\r\n      },\r\n       option:{\r\n         toolbox:{\r\n           top:20,\r\n           right:10\r\n         },\r\n         grid:{\r\n            width:'60%',\r\n            left:'20%',\r\n            top:60,\r\n            right:0\r\n         },\r\n         visualMap:{\r\n           top:60\r\n         }\r\n       }\r\n    },\r\n      \r\n    ]\r\n\r\n   };\r\n   return <ReactECharts  option={options} />;\r\n };\r\n\r\n export default BarChart;","import React from 'react';\r\nimport ReactECharts from 'echarts-for-react';\r\nimport Wine from '../wine.json'; // json file for wine dataset\r\n\r\nconst ScatterChart: React.FC = () => {\r\n // Option value for the chart\r\n    const options = { \r\n   visualMap:{\r\n        \r\n        symbolSize:50,\r\n        \r\n   },\r\n   // value for x cordinate zoom\r\n      dataZoom: {\r\n        show:true,\r\n        height:20,\r\n        type:'inside',\r\n        xAxisIndex:[0],\r\n        start:0,\r\n        end:100,\r\n        filterMode:'filter'\r\n    },\r\n     xAxis:\r\n     {\r\n       type:'value',\r\n       name:'Color-Intensity'\r\n     },\r\n     yAxis:{\r\n       type:'value',\r\n       name:'Hue',\r\n       encode:{x:10,y:11}\r\n     },\r\n    \r\n     dataset:{\r\n       source:Wine.data, // data of wine data set\r\n     },\r\n\r\n     title: {\r\n       left: 'center',\r\n       top:'top',\r\n       text: 'Scatter Chart'\r\n   },\r\n\r\n     series: \r\n       {\r\n         type:'scatter',\r\n         encode:{x:10,y:11}, // data from 10th column : Color-Intensity and 11th column : Hue of Wine dataset\r\n       \r\n       },\r\n     tooltip: {\r\n       trigger: 'item', //pointer to be triggered by individual data item\r\n       axisPointer: {\r\n         show:true,\r\n         type:'cross', // for cross pointer\r\n     }\r\n     },\r\n     // for media queries\r\n     media:[\r\n       {\r\n         \r\n         option:{\r\n            toolbox: {\r\n              right: 10,\r\n            feature: {\r\n                dataZoom: {},\r\n                restore: {},\r\n                  saveAsImage: {}\r\n              }\r\n          },\r\n\r\n           grid:{\r\n           width:'80%',\r\n           right:90,\r\n           top:50,\r\n           bottom:20\r\n           },\r\n           visualMap:{\r\n            top:50\r\n          }\r\n        }\r\n      },\r\n        {\r\n         query:{\r\n          maxWidth:328,\r\n          maxHeight:560,\r\n        },\r\n         option:{\r\n           toolbox:{\r\n             top:20,\r\n           },\r\n           grid:{\r\n              width:'55%',\r\n              left:'20%',\r\n              top:60,\r\n              right:0\r\n           },\r\n           visualMap:{\r\n             top:60\r\n           }\r\n         }\r\n      },\r\n      {\r\n        query:{\r\n         maxWidth:375,\r\n         maxHeight:812,\r\n       },\r\n        option:{\r\n          toolbox:{\r\n            top:20,\r\n          },\r\n          grid:{\r\n             width:'60%',\r\n             left:'20%',\r\n             top:60,\r\n             right:0\r\n          },\r\n          visualMap:{\r\n            top:60\r\n          }\r\n        }\r\n     },\r\n       \r\n     ]\r\n   };\r\n   return <ReactECharts  option={options} />;\r\n };\r\n\r\n export default ScatterChart;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport BarChart from './components/bar-chart';  // bar chart\nimport ScatterChart from './components/scatter-chart'; //scatter chart\nimport reportWebVitals from './reportWebVitals';\n//import { render } from '@testing-library/react';\n\nReactDOM.render(\n  // components App: for heading , BarChart : for bar chart , ScatterChart:for Scatter chart\n  <div>\n    <App />\n    <BarChart />\n    <ScatterChart />\n  </div>\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}